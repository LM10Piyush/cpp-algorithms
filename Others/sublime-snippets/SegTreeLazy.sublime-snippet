<snippet>
	<content><![CDATA[
template <typename T, typename X = int>
struct SegTree {
  vector <T> tree;
  vector <T> lazy;
  int n;
  SegTree(vector <X>& A) {
    n = sz(A);
    tree.resize(4 * n);
    lazy.assign(4 * n, 0);
    build(A, 0, n - 1, 1);
  }

  T merge(T a, T b) {  //merge Two segments
    return min(a, b);
  }

  void build(vector<X> &A, int lo, int hi, int node) {
    if (lo == hi) {
      tree[node] = A[lo];
      return;
    }
    int mid = (lo + hi) >> 1LL;
    build(A, lo, mid, 2 * node);
    build(A, mid + 1, hi, 2 * node + 1);
    tree[node] = merge(tree[2 * node], tree[2 * node + 1]);
  }
  void propagate(int lo, int hi, int node) {
    if (lazy[node]) {
      tree[node] += lazy[node];
      if (lo != hi) {
        lazy[2 * node] += lazy[node];
        lazy[2 * node + 1] += lazy[node];
      }
      lazy[node] = 0;
    }
  }

  void upd(X val, int l, int r, int lo, int hi, int node) {
    //push-changes
    propagate(lo, hi, node);
    //no-overlap
    if (hi < l or r < lo) return;
    //total-overlap
    if (l <= lo and hi <= r) {
      tree[node] += val;
      if (lo != hi) {
        lazy[2 * node] += val;
        lazy[2 * node + 1] += val;
      }
      return;
    }
    int mid = (lo + hi) >> 1;
    upd(val, l, r, lo, mid, 2 * node);
    upd(val, l, r, mid + 1, hi, 2 * node + 1);
    tree[node] = merge(tree[2 * node], tree[2 * node + 1]);

  }

  T qry(int l, int r, int lo, int hi, int node) {
    //push changes
    propagate(lo, hi, node);

    if (hi < l or lo > r) return 1e9;

    if (l <= lo and hi <= r) {
      return tree[node];
    }
    int mid = (lo + hi) >> 1;
    return merge(qry(l, r, lo, mid, 2 * node), qry(l, r, mid + 1, hi, 2 * node + 1));
  }

  void upd(X val, int l, int r) { //upd by +val in [l..r]
    upd(val, l, r, 0, n - 1, 1);
  }
  T qry(int l, int r) {    //[l...r]
    return qry(l, r, 0, n - 1, 1);
  }

};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_SegTreeLazy</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
